
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Facebook Bot Dashboard</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .nav-menu {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .nav-links {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .nav-link {
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            text-decoration: none;
            border-radius: 25px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .nav-link:hover, .nav-link.active {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .chart-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .system-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .info-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .info-card h3 {
            color: white;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }
        
        .info-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            color: rgba(255, 255, 255, 0.8);
        }
        
        .broadcast-section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .broadcast-form {
            display: flex;
            gap: 10px;
            align-items: flex-end;
        }
        
        .broadcast-input {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.9);
            font-size: 1rem;
        }
        
        .broadcast-btn {
            padding: 12px 25px;
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .broadcast-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Facebook Bot Command Center</h1>
            <p>Advanced AI-powered bot management with real-time analytics</p>
        </div>
        
        <div class="nav-menu">
            <div class="nav-links">
                <a href="/" class="nav-link active">üìä Dashboard</a>
                <a href="/analytics" class="nav-link">üìà Analytics</a>
                <a href="/users" class="nav-link">üë• Users</a>
                <a href="/logs" class="nav-link">üìã Logs</a>
                <a href="/settings" class="nav-link">‚öôÔ∏è Settings</a>
                <a href="/test" class="nav-link">üß™ Test Bot</a>
            </div>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <span class="stat-number"><%= stats.totalMessages %></span>
                <span class="stat-label">Total Messages</span>
            </div>
            <div class="stat-card">
                <span class="stat-number"><%= stats.messagesThisHour %></span>
                <span class="stat-label">This Hour</span>
            </div>
            <div class="stat-card">
                <span class="stat-number"><%= stats.messagesThisDay %></span>
                <span class="stat-label">Today</span>
            </div>
            <div class="stat-card">
                <span class="stat-number"><%= stats.totalUsers %></span>
                <span class="stat-label">Total Users</span>
            </div>
            <div class="stat-card">
                <span class="stat-number"><%= stats.activeUsers %></span>
                <span class="stat-label">Active Users</span>
            </div>
            <div class="stat-card">
                <span class="stat-number"><%= Math.round(stats.averageResponseTime) %>ms</span>
                <span class="stat-label">Avg Response</span>
            </div>
        </div>
        
        <div class="chart-container">
            <h2 style="color: white; margin-bottom: 20px;">üìä Hourly Message Distribution</h2>
            <canvas id="hourlyChart" width="400" height="200"></canvas>
        </div>
        
        <div class="system-info">
            <div class="info-card">
                <h3>‚öôÔ∏è Configuration Status</h3>
                <div class="info-item">
                    <span>Gemini AI</span>
                    <span class="status <%= config.geminiConfigured ? 'configured' : 'not-configured' %>">
                        <%= config.geminiConfigured ? '‚úÖ Ready' : '‚ùå Not Configured' %>
                    </span>
                </div>
                <div class="info-item">
                    <span>Facebook Integration</span>
                    <span class="status <%= config.facebookConfigured ? 'configured' : 'not-configured' %>">
                        <%= config.facebookConfigured ? '‚úÖ Connected' : '‚ùå Not Connected' %>
                    </span>
                </div>
                <div class="info-item">
                    <span>Auto Respond</span>
                    <span class="status configured">
                        <%= botConfig.autoRespond ? '‚úÖ Enabled' : '‚ùå Disabled' %>
                    </span>
                </div>
            </div>
            
            <div class="info-card">
                <h3>üìà Response Analytics</h3>
                <div class="info-item">
                    <span>Successful</span>
                    <span style="color: #4CAF50;"><%= stats.responseTypes.success %></span>
                </div>
                <div class="info-item">
                    <span>Errors</span>
                    <span style="color: #f44336;"><%= stats.responseTypes.error %></span>
                </div>
                <div class="info-item">
                    <span>Timeouts</span>
                    <span style="color: #ff9800;"><%= stats.responseTypes.timeout %></span>
                </div>
            </div>
            
            <div class="info-card">
                <h3>üñ•Ô∏è System Status</h3>
                <div class="info-item">
                    <span>Uptime</span>
                    <span><%= Math.floor(stats.uptime / 3600) %>h <%= Math.floor((stats.uptime % 3600) / 60) %>m</span>
                </div>
                <div class="info-item">
                    <span>Memory Usage</span>
                    <span><%= Math.round(stats.memoryUsage.heapUsed / 1024 / 1024) %>MB</span>
                </div>
                <div class="info-item">
                    <span>Peak Hour</span>
                    <span><%= stats.currentHour %>:00</span>
                </div>
            </div>
        </div>
        
        <% if (config.facebookConfigured) { %>
        <div class="broadcast-section">
            <h2 style="color: white; margin-bottom: 20px;">üì¢ Broadcast Message</h2>
            <div class="broadcast-form">
                <textarea class="broadcast-input" id="broadcastMessage" placeholder="Send a message to all users..." rows="3"></textarea>
                <button class="broadcast-btn" onclick="sendBroadcast()">Send to <%= stats.totalUsers %> users</button>
            </div>
            <div id="broadcastResult" style="margin-top: 10px;"></div>
        </div>
        <% } %>
        
        <div class="config-section">
            <h2>üåê Webhook Configuration</h2>
            <div class="webhook-url"><%= config.webhookUrl %></div>
        </div>
        
        <% if (stats.recentMessages.length > 0) { %>
        <div class="recent-messages">
            <h2>üí¨ Recent Messages</h2>
            <% stats.recentMessages.slice(0, 5).forEach(function(msg) { %>
            <div class="message-item fade-in">
                <div class="message-time"><%= new Date(msg.timestamp).toLocaleString() %> 
                    <% if (msg.responseTime) { %>
                        <span style="color: #4CAF50;">(<%= msg.responseTime %>ms)</span>
                    <% } %>
                </div>
                <div class="message-text"><strong>User:</strong> <%= msg.message %></div>
                <% if (msg.response) { %>
                <div class="message-response"><strong>Bot:</strong> <%= msg.response %></div>
                <% } %>
            </div>
            <% }); %>
        </div>
        <% } %>
        
        <div class="buttons">
            <button onclick="location.reload()" class="btn btn-success">üîÑ Refresh</button>
            <a href="/api/export-stats" class="btn btn-primary" download>üì• Export Data</a>
        </div>
    </div>
    
    <script>
        // Chart for hourly distribution
        const ctx = document.getElementById('hourlyChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: Array.from({length: 24}, (_, i) => `${i}:00`),
                datasets: [{
                    label: 'Messages per Hour',
                    data: <%= JSON.stringify(stats.hourlyStats) %>,
                    backgroundColor: 'rgba(76, 175, 80, 0.6)',
                    borderColor: 'rgba(76, 175, 80, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        labels: { color: 'white' }
                    }
                },
                scales: {
                    y: { 
                        ticks: { color: 'white' },
                        grid: { color: 'rgba(255, 255, 255, 0.1)' }
                    },
                    x: { 
                        ticks: { color: 'white' },
                        grid: { color: 'rgba(255, 255, 255, 0.1)' }
                    }
                }
            }
        });
        
        // Broadcast function
        async function sendBroadcast() {
            const message = document.getElementById('broadcastMessage').value.trim();
            const resultDiv = document.getElementById('broadcastResult');
            
            if (!message) {
                resultDiv.innerHTML = '<div style="color: #f44336;">Please enter a message</div>';
                return;
            }
            
            resultDiv.innerHTML = '<div style="color: #2196F3;">Sending broadcast...</div>';
            
            try {
                const response = await fetch('/api/broadcast', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    resultDiv.innerHTML = `<div style="color: #4CAF50;">‚úÖ Sent to ${data.sent} users, ${data.errors} errors</div>`;
                    document.getElementById('broadcastMessage').value = '';
                } else {
                    resultDiv.innerHTML = `<div style="color: #f44336;">‚ùå ${data.error}</div>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<div style="color: #f44336;">‚ùå Network error</div>`;
            }
        }
        
        // Auto-refresh every 60 seconds
        setTimeout(() => location.reload(), 60000);
    </script>
</body>
</html>
