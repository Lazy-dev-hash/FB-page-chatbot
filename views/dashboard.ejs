<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🤖 AI Bot Dashboard</title>
    <link rel="stylesheet" href="/style.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: white;
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 40px 20px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border-radius: 25px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            animation: shimmer 3s infinite;
        }

        @keyframes shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .header h1 {
            font-size: 3rem;
            margin-bottom: 10px;
            text-shadow: 0 4px 8px rgba(0,0,0,0.3);
            background: linear-gradient(45deg, #fff, #f0f8ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .navigation {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 40px;
        }

        .nav-btn {
            padding: 15px 25px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 50px;
            color: white;
            text-decoration: none;
            transition: all 0.3s ease;
            font-weight: 600;
            position: relative;
            overflow: hidden;
        }

        .nav-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .nav-btn:hover::before {
            left: 100%;
        }

        .nav-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #4CAF50, #2196F3, #ff9800, #e91e63);
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }

        .stat-card:hover::before {
            transform: translateX(0);
        }

        .stat-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
        }

        .stat-icon {
            font-size: 3rem;
            margin-bottom: 15px;
            display: block;
        }

        .stat-number {
            font-size: 2.8rem;
            font-weight: bold;
            display: block;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .stat-label {
            font-size: 1.1rem;
            opacity: 0.9;
            font-weight: 500;
        }

        .config-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .config-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .config-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
        }

        .config-title {
            font-size: 1.4rem;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
        }

        .status-online {
            background: #4CAF50;
            box-shadow: 0 0 10px #4CAF50;
        }

        .status-offline {
            background: #f44336;
            box-shadow: 0 0 10px #f44336;
        }

        .config-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .config-item:last-child {
            border-bottom: none;
        }

        .config-label {
            font-weight: 500;
            opacity: 0.9;
        }

        .config-value {
            font-weight: bold;
            color: #4CAF50;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .action-btn {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            padding: 20px;
            color: white;
            text-decoration: none;
            transition: all 0.3s ease;
            text-align: center;
            font-weight: 600;
            cursor: pointer;
        }

        .action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
        }

        .action-icon {
            font-size: 2rem;
            display: block;
            margin-bottom: 10px;
        }

        .footer {
            text-align: center;
            padding: 30px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            margin-top: 40px;
        }

        .credit {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .uptime-badge {
            display: inline-block;
            background: rgba(76, 175, 80, 0.2);
            color: #4CAF50;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 600;
            border: 1px solid rgba(76, 175, 80, 0.3);
        }

        .activity-feed {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 40px;
        }

        .activity-title {
            font-size: 1.4rem;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .activity-item {
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            margin-bottom: 10px;
            border-left: 4px solid #4CAF50;
        }

        .activity-time {
            font-size: 0.9rem;
            opacity: 0.7;
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 2rem;
            }

            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            }

            .config-grid {
                grid-template-columns: 1fr;
            }

            .quick-actions {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .loading-shimmer {
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            background-size: 200% 100%;
            animation: shimmer-load 1.5s infinite;
        }

        @keyframes shimmer-load {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Header -->
        <div class="header">
            <h1>🤖 AI Bot Dashboard</h1>
            <p class="subtitle">Advanced Facebook Messenger Bot powered by Gemini AI</p>
        </div>

        <!-- Navigation -->
        <div class="navigation">
            <a href="/" class="nav-btn">🏠 Dashboard</a>
            <a href="/test" class="nav-btn">🧪 Test Bot</a>
            <a href="/analytics" class="nav-btn">📊 Analytics</a>
            <a href="/users" class="nav-btn">👥 Users</a>
            <a href="/logs" class="nav-btn">📋 Logs</a>
            <a href="/settings" class="nav-btn">⚙️ Settings</a>
        </div>

        <!-- Statistics Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <span class="stat-icon">💬</span>
                <span class="stat-number"><%= stats.totalMessages %></span>
                <span class="stat-label">Total Messages</span>
            </div>

            <div class="stat-card">
                <span class="stat-icon">👥</span>
                <span class="stat-number"><%= stats.totalUsers %></span>
                <span class="stat-label">Total Users</span>
            </div>

            <div class="stat-card">
                <span class="stat-icon">🟢</span>
                <span class="stat-number"><%= stats.activeUsers %></span>
                <span class="stat-label">Active Users</span>
            </div>

            <div class="stat-card">
                <span class="stat-icon">⚡</span>
                <span class="stat-number"><%= Math.round(stats.averageResponseTime) %>ms</span>
                <span class="stat-label">Avg Response Time</span>
            </div>

            <div class="stat-card">
                <span class="stat-icon">✅</span>
                <span class="stat-number"><%= stats.responseTypes.success %></span>
                <span class="stat-label">Successful Responses</span>
            </div>

            <div class="stat-card">
                <span class="stat-icon">⏰</span>
                <span class="stat-number"><%= Math.floor(stats.uptime / 3600) %>h</span>
                <span class="stat-label">Bot Uptime</span>
            </div>
        </div>

        <!-- Configuration Status -->
        <div class="config-grid">
            <div class="config-card">
                <div class="config-title">
                    🤖 AI Configuration
                    <span class="status-indicator <%= config.geminiConfigured ? 'status-online' : 'status-offline' %>"></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Gemini API</span>
                    <span class="config-value"><%= config.geminiConfigured ? 'Connected' : 'Not Configured' %></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Auto Respond</span>
                    <span class="config-value"><%= botConfig.autoRespond ? 'Enabled' : 'Disabled' %></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Response Style</span>
                    <span class="config-value"><%= botConfig.responseStyle %></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Context Awareness</span>
                    <span class="config-value"><%= botConfig.enableContextAwareness ? 'Enabled' : 'Disabled' %></span>
                </div>
            </div>

            <div class="config-card">
                <div class="config-title">
                    📱 Facebook Integration
                    <span class="status-indicator <%= config.facebookConfigured ? 'status-online' : 'status-offline' %>"></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Webhook</span>
                    <span class="config-value"><%= config.facebookConfigured ? 'Connected' : 'Not Configured' %></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Webhook URL</span>
                    <span class="config-value" style="font-size: 0.8rem; word-break: break-all;"><%= config.webhookUrl %></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Typing Indicator</span>
                    <span class="config-value"><%= botConfig.enableTypingIndicator ? 'Enabled' : 'Disabled' %></span>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
            <a href="/test" class="action-btn">
                <span class="action-icon">🧪</span>
                Test Bot Interface
            </a>
            <a href="/analytics" class="action-btn">
                <span class="action-icon">📊</span>
                View Analytics
            </a>
            <a href="/users" class="action-btn">
                <span class="action-icon">👥</span>
                Manage Users
            </a>
            <a href="/settings" class="action-btn">
                <span class="action-icon">⚙️</span>
                Bot Settings
            </a>
            <a href="/logs" class="action-btn">
                <span class="action-icon">📋</span>
                View Logs
            </a>
            <button class="action-btn" onclick="refreshStats()">
                <span class="action-icon">🔄</span>
                Refresh Stats
            </button>
        </div>

        <!-- Activity Feed -->
        <div class="activity-feed">
            <div class="activity-title">
                📈 Recent Activity
                <span class="pulse">🟢</span>
            </div>
            <% if (stats.recentMessages && stats.recentMessages.length > 0) { %>
                <% stats.recentMessages.slice(0, 5).forEach(message => { %>
                    <div class="activity-item">
                        <strong>User Message:</strong> <%= message.message.substring(0, 100) %>...
                        <div class="activity-time">
                            <%= new Date(message.timestamp).toLocaleTimeString() %>
                            <% if (message.responseTime) { %>
                                • Response: <%= message.responseTime %>ms
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="activity-item">
                    <strong>No recent activity</strong>
                    <div class="activity-time">Bot is ready to receive messages</div>
                </div>
            <% } %>
        </div>

        <!-- System Information -->
        <div class="config-grid">
            <div class="config-card">
                <div class="config-title">💾 System Information</div>
                <div class="config-item">
                    <span class="config-label">Memory Usage</span>
                    <span class="config-value"><%= Math.round(stats.memoryUsage.heapUsed / 1024 / 1024) %> MB</span>
                </div>
                <div class="config-item">
                    <span class="config-label">Uptime</span>
                    <span class="config-value">
                        <%= Math.floor(stats.uptime / 3600) %>h <%= Math.floor((stats.uptime % 3600) / 60) %>m
                    </span>
                </div>
                <div class="config-item">
                    <span class="config-label">Messages This Hour</span>
                    <span class="config-value"><%= stats.messagesThisHour %></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Success Rate</span>
                    <span class="config-value">
                        <%= stats.totalMessages > 0 ? Math.round(stats.responseTypes.success / stats.totalMessages * 100) : 100 %>%
                    </span>
                </div>
            </div>

            <div class="config-card">
                <div class="config-title">🔧 Bot Features</div>
                <div class="config-item">
                    <span class="config-label">Sentiment Analysis</span>
                    <span class="config-value"><%= botConfig.enableSentimentAnalysis ? 'Active' : 'Inactive' %></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Intent Detection</span>
                    <span class="config-value"><%= botConfig.enableIntentDetection ? 'Active' : 'Inactive' %></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Smart Suggestions</span>
                    <span class="config-value"><%= botConfig.enableSmartSuggestions ? 'Active' : 'Inactive' %></span>
                </div>
                <div class="config-item">
                    <span class="config-label">Conversation Memory</span>
                    <span class="config-value"><%= botConfig.enableConversationMemory ? 'Active' : 'Inactive' %></span>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <div class="footer">
            <div class="credit">💝 Created with 🤍 by Sunnel John Rebano</div>
            <div class="uptime-badge">🟢 Online • <%= Math.floor(stats.uptime / 3600) %>h uptime</div>
            <div style="margin-top: 15px; opacity: 0.8;">
                Advanced AI-powered Facebook Messenger Bot • Last updated: <%= new Date().toLocaleString() %>
            </div>
        </div>
    </div>

    <script>
        let currentView = 'overview';

        function showView(view) {
            document.querySelectorAll('.view').forEach(v => v.style.display = 'none');
            document.getElementById(view + 'View').style.display = 'block';

            document.querySelectorAll('.nav-link').forEach(link => link.classList.remove('active'));
            const targetLink = document.querySelector(`[onclick="showView('${view}')"]`);
            if (targetLink) {
                targetLink.classList.add('active');
            }

            currentView = view;
        }

        function toggleSetting(setting) {
            // This would typically make an API call to update the setting
            showNotification('Setting updated!', 'success');
        }

        function showNotification(message, type) {
            type = type || 'info';
            const notification = document.createElement('div');
            notification.className = 'notification notification-' + type;
            notification.innerHTML = '<span>' + message + '</span><button onclick="this.parentElement.remove()">×</button>';
            document.body.appendChild(notification);

            setTimeout(function() {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }

        function updateStats() {
            fetch('/api/stats')
                .then(function(response) {
                    return response.json();
                })
                .then(function(data) {
                    const totalMsgEl = document.getElementById('totalMessages');
                    const hourlyMsgEl = document.getElementById('messagesThisHour');
                    const totalUsersEl = document.getElementById('totalUsers');
                    const activeUsersEl = document.getElementById('activeUsers');

                    if (totalMsgEl) totalMsgEl.textContent = data.totalMessages || 0;
                    if (hourlyMsgEl) hourlyMsgEl.textContent = data.messagesThisHour || 0;
                    if (totalUsersEl) totalUsersEl.textContent = data.totalUsers || 0;
                    if (activeUsersEl) activeUsersEl.textContent = data.activeUsers || 0;
                })
                .catch(function(error) {
                    console.error('Error updating stats:', error);
                });
        }

        // Update stats every 30 seconds
        setInterval(updateStats, 30000);

        // Initialize the dashboard
        document.addEventListener('DOMContentLoaded', function() {
            showView('overview');
        });
    </script>
</body>
</html>