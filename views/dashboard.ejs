<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Facebook Bot Dashboard</title>
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        .nav-menu {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .nav-links {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .nav-link {
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            text-decoration: none;
            border-radius: 25px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .nav-link:hover, .nav-link.active {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .chart-container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .system-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .info-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .info-card h3 {
            color: white;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            color: rgba(255, 255, 255, 0.8);
        }

        .broadcast-section {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .broadcast-form {
            display: flex;
            gap: 10px;
            align-items: flex-end;
        }

        .broadcast-input {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.9);
            font-size: 1rem;
        }

        .broadcast-btn {
            padding: 12px 25px;
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .broadcast-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        /* Credit Section Styles */
        .credit-section {
          position: fixed;
          bottom: 20px;
          left: 20px;
          z-index: 1000;
        }

        .credit-card {
          background: rgba(255, 255, 255, 0.1);
          backdrop-filter: blur(10px);
          border-radius: 10px;
          padding: 10px 15px;
          border: 1px solid rgba(255, 255, 255, 0.2);
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .credit-content {
          display: flex;
          align-items: center;
        }

        .credit-text {
          color: white;
          font-size: 0.9rem;
          margin-left: 8px;
        }

        .heart {
          color: #e91e63;
        }

        .sparkles {
          color: #fff;
          margin-left: 5px;
          animation: sparkleAnimation 1s infinite;
        }

        @keyframes sparkleAnimation {
          0%, 100% {
            opacity: 0.5;
          }
          50% {
            opacity: 1;
          }
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            z-index: 1001;
            opacity: 0.9;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .notification button {
            background: none;
            border: none;
            color: white;
            font-size: 1.2em;
            cursor: pointer;
            margin-left: 20px;
        }

        .notification-success {
            background-color: #4CAF50;
        }

        .notification-error {
            background-color: #f44336;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Facebook Bot Command Center</h1>
            <p>Advanced AI-powered bot management with real-time analytics</p>
        </div>

        <div class="nav-menu">
            <div class="nav-links">
                <a href="/" class="nav-link active">üìä Dashboard</a>
                <a href="/analytics" class="nav-link">üìà Analytics</a>
                <a href="/users" class="nav-link">üë• Users</a>
                <a href="/logs" class="nav-link">üìã Logs</a>
                <a href="/settings" class="nav-link">‚öôÔ∏è Settings</a>
                <a href="/test" class="nav-link">üß™ Test Bot</a>
            </div>
        </div>

        <div class="stats-grid">
            <div class="stat-card">
                <span class="stat-number" id="totalMessages"><%= stats.totalMessages %></span>
                <span class="stat-label">Total Messages</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="messagesThisHour"><%= stats.messagesThisHour %></span>
                <span class="stat-label">This Hour</span>
            </div>
            <div class="stat-card">
                <span class="stat-number"><%= stats.messagesThisDay %></span>
                <span class="stat-label">Today</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="totalUsers"><%= stats.totalUsers %></span>
                <span class="stat-label">Total Users</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="activeUsers"><%= stats.activeUsers %></span>
                <span class="stat-label">Active Users</span>
            </div>
            <div class="stat-card">
                <span class="stat-number"><%= Math.round(stats.averageResponseTime) %>ms</span>
                <span class="stat-label">Avg Response</span>
            </div>
        </div>

        <div class="chart-container">
            <h2 style="color: white; margin-bottom: 20px;">üìä Hourly Message Distribution</h2>
            <canvas id="hourlyChart" width="400" height="200"></canvas>
        </div>

        <div class="system-info">
            <div class="info-card">
                <h3>‚öôÔ∏è Configuration Status</h3>
                <div class="info-item">
                    <span>Gemini AI</span>
                    <span class="status <%= config.geminiConfigured ? 'configured' : 'not-configured' %>">
                        <%= config.geminiConfigured ? '‚úÖ Ready' : '‚ùå Not Configured' %>
                    </span>
                </div>
                <div class="info-item">
                    <span>Facebook Integration</span>
                    <span class="status <%= config.facebookConfigured ? 'configured' : 'not-configured' %>">
                        <%= config.facebookConfigured ? '‚úÖ Connected' : '‚ùå Not Connected' %>
                    </span>
                </div>
                <div class="info-item">
                    <span>Auto Respond</span>
                    <span class="status configured">
                        <%= botConfig.autoRespond ? '‚úÖ Enabled' : '‚ùå Disabled' %>
                    </span>
                </div>
            </div>

            <div class="info-card">
                <h3>üìà Response Analytics</h3>
                <div class="info-item">
                    <span>Successful</span>
                    <span style="color: #4CAF50;"><%= stats.responseTypes.success %></span>
                </div>
                <div class="info-item">
                    <span>Errors</span>
                    <span style="color: #f44336;"><%= stats.responseTypes.error %></span>
                </div>
                <div class="info-item">
                    <span>Timeouts</span>
                    <span style="color: #ff9800;"><%= stats.responseTypes.timeout %></span>
                </div>
            </div>

            <div class="info-card">
                <h3>üñ•Ô∏è System Status</h3>
                <div class="info-item">
                    <span>Uptime</span>
                    <span><%= Math.floor(stats.uptime / 3600) %>h <%= Math.floor((stats.uptime % 3600) / 60) %>m</span>
                </div>
                <div class="info-item">
                    <span>Memory Usage</span>
                    <span><%= Math.round(stats.memoryUsage.heapUsed / 1024 / 1024) %>MB</span>
                </div>
                <div class="info-item">
                    <span>Peak Hour</span>
                    <span><%= stats.currentHour %>:00</span>
                </div>
            </div>

            <div class="info-card">
                <h3 style="color: white;">ü©∫ System Health</h3>
                <div class="system-health">
                    <!-- System health data will be dynamically updated here -->
                </div>
            </div>
        </div>

        <% if (config.facebookConfigured) { %>
        <div class="broadcast-section">
            <h2 style="color: white; margin-bottom: 20px;">üì¢ Broadcast Message</h2>
            <div class="broadcast-form">
                <textarea class="broadcast-input" id="broadcastMessage" placeholder="Send a message to all users..." rows="3"></textarea>
                <button class="broadcast-btn" onclick="sendBroadcast()">Send to <%= stats.totalUsers %> users</button>
            </div>
            <div id="broadcastResult" style="margin-top: 10px;"></div>
        </div>
        <% } %>

        <div class="config-section">
            <h2>üåê Webhook Configuration</h2>
            <div class="webhook-url"><%= config.webhookUrl %></div>
        </div>

        <% if (stats.recentMessages.length > 0) { %>
        <div class="recent-messages">
            <h2>üí¨ Recent Messages</h2>
            <% stats.recentMessages.slice(0, 5).forEach(function(msg) { %>
            <div class="message-item fade-in">
                <div class="message-time"><%= new Date(msg.timestamp).toLocaleString() %> 
                    <% if (msg.responseTime) { %>
                        <span style="color: #4CAF50;">(<%= msg.responseTime %>ms)</span>
                    <% } %>
                </div>
                <div class="message-text"><strong>User:</strong> <%= msg.message %></div>
                <% if (msg.response) { %>
                <div class="message-response"><strong>Bot:</strong> <%= msg.response %></div>
                <% } %>
            </div>
            <% }); %>
        </div>
        <% } %>

        <div class="buttons">
            <button onclick="location.reload()" class="btn btn-success">üîÑ Refresh</button>
            <a href="/api/export-stats" class="btn btn-primary" download>üì• Export Data</a>
        </div>
    </div>

  <!-- Credit Section -->
  <div class="credit-section">
    <div class="credit-card">
      <div class="credit-content">
        <div class="heart-animation">ü§ç</div>
        <p class="credit-text">Created with <span class="heart">ü§ç</span> by <strong>Sunnel John Rebano</strong></p>
        <div class="sparkles">‚ú®</div>
      </div>
    </div>
  </div>

  <script>
    let statsChart, hourlyChart;

    // Real-time updates with enhanced error handling
    setInterval(async () => {
      try {
        const response = await fetch('/api/stats');
        const stats = await response.json();

        updateDashboardStats(stats);
        updateCharts(stats);
        updateSystemHealth(stats);
      } catch (error) {
        console.error('Error updating stats:', error);
        showNotification('Connection error', 'error');
      }
    }, 3000);

    function updateDashboardStats(stats) {
      const elements = {
        'totalMessages': stats.totalMessages,
        'messagesThisHour': stats.messagesThisHour,
        'totalUsers': stats.totalUsers,
        'activeUsers': stats.activeUsers
      };

      Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
          element.textContent = value;
          element.style.transform = 'scale(1.1)';
          setTimeout(() => element.style.transform = 'scale(1)', 200);
        }
      });
    }

    function updateSystemHealth(stats) {
      const uptime = Math.floor(stats.uptime / 3600);
      const memory = Math.round(stats.memoryUsage.heapUsed / 1024 / 1024);

      const healthElement = document.querySelector('.system-health');
      if (healthElement) {
        healthElement.innerHTML = `
          <div class="health-item">
            <span class="health-label">Uptime:</span>
            <span class="health-value">${uptime}h</span>
          </div>
          <div class="health-item">
            <span class="health-label">Memory:</span>
            <span class="health-value">${memory}MB</span>
          </div>
        `;
      }
    }

    function updateCharts(stats) {
      // Update stats chart with animation
      if (statsChart) {
        statsChart.data.datasets[0].data = [
          stats.responseTypes.success,
          stats.responseTypes.error,
          stats.responseTypes.timeout
        ];
        statsChart.update('active');
      }

      // Update hourly chart with animation
      if (hourlyChart) {
        hourlyChart.data.datasets[0].data = stats.hourlyStats;
        hourlyChart.update('active');
      }
    }

    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.innerHTML = `
        <span>${message}</span>
        <button onclick="this.parentElement.remove()">√ó</button>
      `;

      document.body.appendChild(notification);

      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
      }, 3000);
    }

    // Export stats with loading indicator
    async function exportStats() {
      const button = event.target;
      const originalText = button.textContent;
      button.textContent = 'Exporting...';
      button.disabled = true;

      try {
        window.open('/api/export-stats', '_blank');
        showNotification('Stats exported successfully!', 'success');
      } catch (error) {
        showNotification('Export failed', 'error');
      } finally {
        setTimeout(() => {
          button.textContent = originalText;
          button.disabled = false;
        }, 1000);
      }
    }

    // Clear logs with confirmation
    async function clearLogs() {
      if (confirm('Are you sure you want to clear all logs? This action cannot be undone.')) {
        try {
          const response = await fetch('/api/clear-logs', { method: 'POST' });
          const result = await response.json();

          if (result.success) {
            showNotification('Logs cleared successfully!', 'success');
            setTimeout(() => location.reload(), 1000);
          }
        } catch (error) {
          console.error('Error clearing logs:', error);
          showNotification('Error clearing logs', 'error');
        }
      }
    }

    // Toggle setting function
    function toggleSetting(settingName) {
      const toggle = event.target;
      const isEnabled = toggle.classList.contains('enabled');

      // Visual feedback
      toggle.classList.toggle('enabled');
      toggle.style.transform = 'scale(0.95)';
      setTimeout(() => toggle.style.transform = 'scale(1)', 150);

      // Update setting via API
      updateBotSetting(settingName, !isEnabled);
    }

    async function updateBotSetting(setting, value) {
      try {
        const response = await fetch('/api/config', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ [setting]: value })
        });

        const result = await response.json();
        if (result.success) {
          showNotification(`${setting} updated!`, 'success');
        }
      } catch (error) {
        showNotification('Failed to update setting', 'error');
      }
    }

    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', () => {
      showNotification('Dashboard loaded successfully!', 'success');

      // Add pulse animation to important stats
      const statCards = document.querySelectorAll('.stat-card');
      statCards.forEach(card => {
        card.addEventListener('mouseenter', () => {
          card.style.transform = 'translateY(-5px) scale(1.02)';
        });
        card.addEventListener('mouseleave', () => {
          card.style.transform = 'translateY(0) scale(1)';
        });
      });
    });
  </script>
</body>
</html>