
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🚀 AI Bot Messenger</title>
    <link rel="stylesheet" href="/style.css">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            height: 100vh;
            overflow: hidden;
        }

        .messenger-container {
            display: flex;
            height: 100vh;
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            box-shadow: 0 0 50px rgba(0,0,0,0.3);
        }

        .sidebar {
            width: 320px;
            background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
            display: flex;
            flex-direction: column;
            border-right: 1px solid #e0e0e0;
        }

        .sidebar-header {
            padding: 20px;
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255,255,255,0.2);
        }

        .sidebar-title {
            color: white;
            font-size: 24px;
            font-weight: bold;
            margin: 0;
            text-align: center;
        }

        .sidebar-subtitle {
            color: rgba(255,255,255,0.8);
            font-size: 14px;
            text-align: center;
            margin: 5px 0 0 0;
        }

        .tools-section {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .tool-category {
            margin-bottom: 25px;
        }

        .tool-category h3 {
            color: white;
            font-size: 16px;
            margin-bottom: 15px;
            font-weight: 600;
        }

        .quick-actions {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .quick-action-btn {
            padding: 12px 16px;
            background: rgba(255,255,255,0.1);
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            text-align: left;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }

        .quick-action-btn:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-2px);
        }

        .youtube-section {
            background: rgba(255,255,255,0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 15px;
            margin-top: 20px;
            border: 1px solid rgba(255,255,255,0.2);
        }

        .youtube-input {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 10px;
            margin-bottom: 10px;
            background: rgba(255,255,255,0.9);
            font-size: 14px;
        }

        .youtube-buttons {
            display: flex;
            gap: 8px;
        }

        .youtube-btn {
            flex: 1;
            padding: 8px 12px;
            background: rgba(255,255,255,0.2);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
        }

        .youtube-btn:hover {
            background: rgba(255,255,255,0.3);
        }

        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #f8f9fa;
        }

        .chat-header {
            padding: 20px;
            background: white;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-title {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .bot-avatar {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
        }

        .bot-info h2 {
            margin: 0;
            font-size: 18px;
            color: #333;
        }

        .bot-status {
            font-size: 12px;
            color: #4CAF50;
        }

        .chat-stats {
            display: flex;
            gap: 20px;
            font-size: 12px;
            color: #666;
        }

        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: #f8f9fa;
        }

        .message-group {
            margin-bottom: 20px;
        }

        .message-bubble {
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 18px;
            margin-bottom: 4px;
            word-wrap: break-word;
            animation: messageSlideIn 0.3s ease-out;
        }

        .user-message {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }

        .bot-message {
            background: white;
            color: #333;
            margin-right: auto;
            border-bottom-left-radius: 4px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            line-height: 1.4;
        }

        .message-time {
            font-size: 11px;
            color: #999;
            text-align: center;
            margin: 8px 0;
        }

        .typing-indicator {
            background: white;
            border-radius: 18px;
            padding: 12px 16px;
            margin-right: auto;
            max-width: 60px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            display: none;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: #ccc;
            border-radius: 50%;
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(1) { animation-delay: 0s; }
        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typing {
            0%, 60%, 100% { opacity: 0.3; transform: scale(1); }
            30% { opacity: 1; transform: scale(1.2); }
        }

        .input-area {
            padding: 20px;
            background: white;
            border-top: 1px solid #e0e0e0;
        }

        .input-container {
            display: flex;
            align-items: flex-end;
            gap: 12px;
            background: #f8f9fa;
            border-radius: 25px;
            padding: 8px;
        }

        .message-input {
            flex: 1;
            border: none;
            background: transparent;
            padding: 12px 16px;
            font-size: 15px;
            outline: none;
            resize: none;
            min-height: 20px;
            max-height: 100px;
            font-family: inherit;
        }

        .send-button {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border: none;
            border-radius: 50%;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .send-button:hover {
            transform: scale(1.1);
        }

        .send-button:disabled {
            opacity: 0.5;
            transform: none;
            cursor: not-allowed;
        }

        .floating-stats {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            z-index: 1000;
            display: none;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border-radius: 10px;
            padding: 15px 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            z-index: 1001;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        @keyframes messageSlideIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .messenger-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                height: 200px;
                border-right: none;
                border-bottom: 1px solid #e0e0e0;
            }
            
            .tools-section {
                display: flex;
                gap: 15px;
                overflow-x: auto;
                padding: 15px;
            }
            
            .tool-category {
                min-width: 200px;
                margin-bottom: 0;
            }
        }

        /* Enhanced message formatting */
        .bot-message strong {
            color: #667eea;
            font-weight: 600;
        }

        .bot-message code {
            background: #f1f3f4;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 13px;
        }

        .credit-message {
            font-size: 11px;
            color: #999;
            font-style: italic;
            border-top: 1px solid #eee;
            padding-top: 8px;
            margin-top: 8px;
        }
    </style>
</head>
<body>
    <div class="messenger-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h1 class="sidebar-title">🤖 AI Assistant</h1>
                <p class="sidebar-subtitle">Powered by Gemini Pro</p>
            </div>
            
            <div class="tools-section">
                <!-- Quick Actions -->
                <div class="tool-category">
                    <h3>⚡ Quick Actions</h3>
                    <div class="quick-actions">
                        <button class="quick-action-btn" onclick="sendQuickMessage('👋 Hello! How are you today?')">
                            👋 Say Hello
                        </button>
                        <button class="quick-action-btn" onclick="sendQuickMessage('❓ What can you help me with?')">
                            ❓ Get Help
                        </button>
                        <button class="quick-action-btn" onclick="sendQuickMessage('😄 Tell me a funny joke!')">
                            😄 Tell Joke
                        </button>
                        <button class="quick-action-btn" onclick="sendQuickMessage('🤖 Explain artificial intelligence')">
                            🤖 AI Info
                        </button>
                        <button class="quick-action-btn" onclick="sendQuickMessage('💻 How do I learn programming?')">
                            💻 Programming Help
                        </button>
                        <button class="quick-action-btn" onclick="sendQuickMessage('🌟 Give me some life advice')">
                            🌟 Life Advice
                        </button>
                    </div>
                </div>

                <!-- YouTube Tools -->
                <div class="tool-category">
                    <h3>🎵 YouTube Tools</h3>
                    <div class="youtube-section">
                        <input type="text" class="youtube-input" id="youtubeUrl" placeholder="Paste YouTube URL here...">
                        <div class="youtube-buttons">
                            <button class="youtube-btn" onclick="downloadMP3()">🎵 MP3</button>
                            <button class="youtube-btn" onclick="downloadVideo()">🎥 Video</button>
                            <button class="youtube-btn" onclick="getVideoInfo()">ℹ️ Info</button>
                        </div>
                    </div>
                </div>

                <!-- Stats -->
                <div class="tool-category">
                    <h3>📊 Chat Stats</h3>
                    <div style="background: rgba(255,255,255,0.1); border-radius: 10px; padding: 15px;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                            <span style="color: rgba(255,255,255,0.8); font-size: 12px;">Messages:</span>
                            <span style="color: white; font-weight: bold; font-size: 12px;" id="messageCount">0</span>
                        </div>
                        <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">
                            <span style="color: rgba(255,255,255,0.8); font-size: 12px;">Avg Response:</span>
                            <span style="color: white; font-weight: bold; font-size: 12px;" id="avgResponse">0ms</span>
                        </div>
                        <div style="display: flex; justify-content: space-between;">
                            <span style="color: rgba(255,255,255,0.8); font-size: 12px;">Success Rate:</span>
                            <span style="color: white; font-weight: bold; font-size: 12px;" id="successRate">100%</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Chat Area -->
        <div class="chat-area">
            <div class="chat-header">
                <div class="chat-title">
                    <div class="bot-avatar">🤖</div>
                    <div class="bot-info">
                        <h2>AI Assistant</h2>
                        <div class="bot-status">● Online</div>
                    </div>
                </div>
                <div class="chat-stats">
                    <span>Response Time: <span id="lastResponseTime">-</span></span>
                    <span>Status: <span style="color: #4CAF50;">Ready</span></span>
                </div>
            </div>

            <div class="messages-container" id="messagesContainer">
                <div class="message-group">
                    <div class="message-bubble bot-message">
                        🌟 <strong>Welcome to AI Assistant!</strong><br><br>
                        I'm powered by <strong>Google Gemini Pro</strong> and ready to help you with:
                        <br>• Answering questions
                        <br>• Creative writing
                        <br>• Problem solving
                        <br>• YouTube downloads
                        <br>• And much more!
                        <br><br>
                        <em>Try the quick actions on the left or just start typing! 😊</em>
                        <div class="credit-message">
                            💝 Created with 🤍 by <strong>Sunnel John Rebano</strong><br>
                            🕒 Welcome at <%= new Date().toLocaleTimeString('en-US', { hour12: true, hour: '2-digit', minute: '2-digit' }) %>
                        </div>
                    </div>
                    <div class="message-time">Just now</div>
                </div>
            </div>

            <div class="typing-indicator" id="typingIndicator">
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>

            <div class="input-area">
                <div class="input-container">
                    <textarea 
                        class="message-input" 
                        id="messageInput" 
                        placeholder="Type your message..."
                        rows="1"
                        maxlength="<%= config.maxMessageLength %>"
                    ></textarea>
                    <button class="send-button" id="sendButton" onclick="sendMessage()">
                        ➤
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification -->
    <div class="notification" id="notification"></div>

    <script>
        let messageStats = {
            count: 0,
            totalResponseTime: 0,
            successCount: 0
        };

        const messagesContainer = document.getElementById('messagesContainer');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const typingIndicator = document.getElementById('typingIndicator');

        // Auto-resize textarea
        messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = this.scrollHeight + 'px';
            
            if (this.scrollHeight > 100) {
                this.style.overflowY = 'auto';
            } else {
                this.style.overflowY = 'hidden';
            }
        });

        // Send message on Enter (Shift+Enter for new line)
        messageInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        function addMessage(content, isUser = false, responseTime = null) {
            const messageGroup = document.createElement('div');
            messageGroup.className = 'message-group';

            const messageBubble = document.createElement('div');
            messageBubble.className = `message-bubble ${isUser ? 'user-message' : 'bot-message'}`;

            if (isUser) {
                messageBubble.textContent = content;
            } else {
                // Format bot message with credit
                const parts = content.split('\n\n━━━━━━━━━━━━━━━━━━━━\n💝 Created with 🤍 by Sunnel John Rebano\n━━━━━━━━━━━━━━━━━━━━');
                messageBubble.innerHTML = formatMessage(parts[0]);
                
                if (parts.length > 1) {
                    const creditDiv = document.createElement('div');
                    creditDiv.className = 'credit-message';
                    creditDiv.innerHTML = '💝 Created with 🤍 by <strong>Sunnel John Rebano</strong><br>🕒 Asked at ' + parts[1].match(/🕒 Asked at ([^\\n]+)/)?.[1] || 'N/A';
                    messageBubble.appendChild(creditDiv);
                }
            }

            const timeDiv = document.createElement('div');
            timeDiv.className = 'message-time';
            
            if (responseTime) {
                timeDiv.textContent = `${new Date().toLocaleTimeString()} • ${responseTime}ms`;
                document.getElementById('lastResponseTime').textContent = responseTime + 'ms';
            } else {
                timeDiv.textContent = new Date().toLocaleTimeString();
            }

            messageGroup.appendChild(messageBubble);
            messageGroup.appendChild(timeDiv);
            messagesContainer.appendChild(messageGroup);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function formatMessage(text) {
            // Enhanced message formatting
            let formatted = text;
            
            // Bold text
            formatted = formatted.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            
            // Code blocks
            formatted = formatted.replace(/```([\s\S]*?)```/g, '<pre style="background: #f1f3f4; padding: 10px; border-radius: 5px; overflow-x: auto;"><code>$1</code></pre>');
            
            // Inline code
            formatted = formatted.replace(/`([^`]+)`/g, '<code>$1</code>');
            
            // Line breaks
            formatted = formatted.replace(/\n/g, '<br>');
            
            // Section dividers
            formatted = formatted.replace(/━{10,}/g, '<hr style="border: none; height: 1px; background: #eee; margin: 10px 0;">');
            
            return formatted;
        }

        function showNotification(message, type = 'info') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification show ${type}`;
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        function updateStats() {
            document.getElementById('messageCount').textContent = messageStats.count;
            document.getElementById('avgResponse').textContent = 
                messageStats.count > 0 ? Math.round(messageStats.totalResponseTime / messageStats.count) + 'ms' : '0ms';
            document.getElementById('successRate').textContent = 
                messageStats.count > 0 ? Math.round(messageStats.successCount / messageStats.count * 100) + '%' : '100%';
        }

        async function sendMessage() {
            const content = messageInput.value.trim();
            if (!content || sendButton.disabled) return;

            addMessage(content, true);
            messageInput.value = '';
            messageInput.style.height = 'auto';
            
            sendButton.disabled = true;
            typingIndicator.style.display = 'block';
            messagesContainer.scrollTop = messagesContainer.scrollHeight;

            const startTime = Date.now();
            messageStats.count++;

            try {
                const response = await fetch('/api/test-gemini', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: content })
                });

                const data = await response.json();
                const responseTime = Date.now() - startTime;

                if (data.success) {
                    addMessage(data.response, false, responseTime);
                    messageStats.successCount++;
                    messageStats.totalResponseTime += responseTime;
                } else {
                    addMessage(`❌ Error: ${data.error}`, false, responseTime);
                    showNotification(data.error, 'error');
                }
            } catch (error) {
                const responseTime = Date.now() - startTime;
                addMessage('❌ Failed to connect. Please try again.', false, responseTime);
                showNotification('Connection failed', 'error');
            } finally {
                typingIndicator.style.display = 'none';
                sendButton.disabled = false;
                messageInput.focus();
                updateStats();
            }
        }

        function sendQuickMessage(message) {
            messageInput.value = message;
            sendMessage();
        }

        // YouTube functionality
        async function downloadMP3() {
            const url = document.getElementById('youtubeUrl').value.trim();
            if (!url) {
                showNotification('Please enter a YouTube URL', 'error');
                return;
            }

            try {
                showNotification('Starting MP3 download...', 'info');
                const response = await fetch('/api/youtube-mp3', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url })
                });

                if (response.ok) {
                    const blob = await response.blob();
                    const downloadUrl = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = downloadUrl;
                    a.download = 'audio.mp3';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(downloadUrl);
                    showNotification('MP3 download started!', 'success');
                } else {
                    const data = await response.json();
                    showNotification(data.error || 'Download failed', 'error');
                }
            } catch (error) {
                showNotification('Download failed: ' + error.message, 'error');
            }
        }

        async function downloadVideo() {
            const url = document.getElementById('youtubeUrl').value.trim();
            if (!url) {
                showNotification('Please enter a YouTube URL', 'error');
                return;
            }

            try {
                showNotification('Starting video download...', 'info');
                const response = await fetch('/api/youtube-video', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url })
                });

                if (response.ok) {
                    const blob = await response.blob();
                    const downloadUrl = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = downloadUrl;
                    a.download = 'video.mp4';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(downloadUrl);
                    showNotification('Video download started!', 'success');
                } else {
                    const data = await response.json();
                    showNotification(data.error || 'Download failed', 'error');
                }
            } catch (error) {
                showNotification('Download failed: ' + error.message, 'error');
            }
        }

        async function getVideoInfo() {
            const url = document.getElementById('youtubeUrl').value.trim();
            if (!url) {
                showNotification('Please enter a YouTube URL', 'error');
                return;
            }

            try {
                const response = await fetch('/api/youtube-info', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ url })
                });

                const data = await response.json();
                if (data.success) {
                    const video = data.video;
                    const infoMessage = `🎥 **${video.title}**\n\n` +
                        `👤 **Author:** ${video.author}\n` +
                        `⏱️ **Duration:** ${Math.floor(video.duration / 60)}:${(video.duration % 60).toString().padStart(2, '0')}\n` +
                        `👀 **Views:** ${parseInt(video.viewCount).toLocaleString()}\n\n` +
                        `📝 **Description:** ${video.description}`;
                    
                    addMessage(infoMessage, false);
                    showNotification('Video info retrieved!', 'success');
                } else {
                    showNotification(data.error || 'Failed to get info', 'error');
                }
            } catch (error) {
                showNotification('Failed to get info: ' + error.message, 'error');
            }
        }

        // Focus input on load
        messageInput.focus();
    </script>
</body>
</html>
